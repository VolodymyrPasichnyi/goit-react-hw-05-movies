{"version":3,"file":"static/js/947.9d3bcfcc.chunk.js","mappings":"4PA2EA,UAlEqB,WAAO,IAAD,IACvB,GAA0BA,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MACjB,GAAkCN,EAAAA,EAAAA,WAAS,GAA3C,eAAOO,EAAP,KAAkBC,EAAlB,KAiBA,IAfAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAY,mCAAG,oGAEbF,GAAa,GAFA,UAGMG,EAAAA,EAAAA,IAAgBR,GAHtB,OAGPS,EAHO,OAIbV,EAASU,GAJI,gDAMbC,EAAAA,GAAAA,MAAY,UANC,yBAQbL,GAAa,GARA,4EAAH,qDAWlBE,GACH,GAAE,CAACP,KAECF,EACD,OAAO,KAGX,IAAQa,EAAkDb,EAAlDa,OAAQC,EAA0Cd,EAA1Cc,eAAgBC,EAA0Bf,EAA1Be,SAAUC,EAAgBhB,EAAhBgB,YAE1C,OACE,iCACE,SAAC,KAAD,CAAMC,GAAE,oBAAEb,EAASc,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,IAAlC,UACI,2CAEJ,0BACI,gBACIC,IAAG,0CAAqCJ,GACxCK,IAAKP,OAEb,4BACI,wBAAKA,KACL,sCAAcC,MACd,mCACKF,EAAOS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACR,wBAAcA,GAALD,EADD,WAKpB,4BACI,oDACA,2BACI,yBACI,SAAC,KAAD,CAAMN,GAAG,OAAOC,MAAO,CAAEC,KAAMf,EAASc,MAAMC,MAA9C,qBAEJ,yBACI,SAAC,KAAD,CAAMF,GAAG,UAAUC,MAAO,CAAEC,KAAMf,EAASc,MAAMC,MAAjD,6BAIXb,IAAa,SAAC,IAAD,KACd,SAAC,EAAAmB,SAAD,CAAUC,UAAU,SAAC,IAAD,IAApB,UACA,SAAC,KAAD,QAIP,C","sources":["components/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { Loader } from \"components/Loader/Loader\"\nimport { Suspense, useEffect } from \"react\"\nimport { useState } from \"react\"\nimport { toast } from \"react-hot-toast\"\nimport { Link, Outlet, useLocation, useParams } from \"react-router-dom\"\nimport { detailsMovieApi } from \"services/moviesApi\"\n\n\n\nconst MovieDetails = () => {\n    const [movie, setMovie] = useState(null)\n    const { movieId } = useParams()\n    const location = useLocation()\n    const [isLoading, setIsLoading] = useState(false)\n\n    useEffect(() => {\n        const movieDetails = async () =>{\n            try {\n                setIsLoading(true)\n                const data = await detailsMovieApi(movieId)\n                setMovie(data)\n            } catch (error) {\n                toast.error('Error!')\n            } finally {\n                setIsLoading(false)\n            }\n        }\n        movieDetails()\n    }, [movieId])\n\n    if (!movie) {\n        return null\n    }\n\n    const { genres, original_title, overview, poster_path } = movie\n\n    return (\n      <>\n        <Link to={location.state?.from ?? '/'}>\n            <button>Go Back</button>\n        </Link>\n        <div>\n            <img \n                src={`https://image.tmdb.org/t/p/w300/${poster_path}`}\n                alt={original_title} />\n        </div>\n        <div>\n            <h3>{original_title}</h3>\n            <p>Overview: {overview}</p>\n            <p>Genres:\n                {genres.map(({ id, name }) => (\n                    <li key={id}>{name}</li>\n                ))}\n            </p>\n        </div>\n        <div>\n            <h3>Additional information</h3>\n            <ul>\n                <li>\n                    <Link to='cast' state={{ from: location.state.from }}>Cast</Link>\n                </li>\n                <li>\n                    <Link to='reviews' state={{ from: location.state.from }}>Reviews</Link>\n                </li>\n            </ul>\n        </div>\n        {isLoading && <Loader />}\n        <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n      </>\n    )\n}\n\n\nexport default MovieDetails"],"names":["useState","movie","setMovie","movieId","useParams","location","useLocation","isLoading","setIsLoading","useEffect","movieDetails","detailsMovieApi","data","toast","genres","original_title","overview","poster_path","to","state","from","src","alt","map","id","name","Suspense","fallback"],"sourceRoot":""}